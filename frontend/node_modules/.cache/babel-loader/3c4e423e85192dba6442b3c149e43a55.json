{"remainingRequest":"/Users/susmitvengurlekar/Todo-App/frontend/todo_app/node_modules/babel-loader/lib/index.js!/Users/susmitvengurlekar/Todo-App/frontend/todo_app/node_modules/vuetify/lib/components/VData/VData.js","dependencies":[{"path":"/Users/susmitvengurlekar/Todo-App/frontend/todo_app/node_modules/vuetify/lib/components/VData/VData.js","mtime":499162500000},{"path":"/Users/susmitvengurlekar/Todo-App/frontend/todo_app/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/susmitvengurlekar/Todo-App/frontend/todo_app/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuY29uY2F0IjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuZmluZC1pbmRleCI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5Lm1hcCI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LnNsaWNlIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuc3BsaWNlIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMubnVtYmVyLmNvbnN0cnVjdG9yIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMucmVnZXhwLmV4ZWMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5zdHJpbmcuc2VhcmNoIjsKaW1wb3J0IF9vYmplY3RTcHJlYWQgZnJvbSAiL1VzZXJzL3N1c21pdHZlbmd1cmxla2FyL1RvZG8tQXBwL2Zyb250ZW5kL3RvZG9fYXBwL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RTcHJlYWQyIjsKaW1wb3J0IF90b0NvbnN1bWFibGVBcnJheSBmcm9tICIvVXNlcnMvc3VzbWl0dmVuZ3VybGVrYXIvVG9kby1BcHAvZnJvbnRlbmQvdG9kb19hcHAvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL3RvQ29uc3VtYWJsZUFycmF5IjsKLy8gSGVscGVycwppbXBvcnQgeyB3cmFwSW5BcnJheSwgc29ydEl0ZW1zLCBkZWVwRXF1YWwsIGdyb3VwSXRlbXMsIHNlYXJjaEl0ZW1zLCBmaWxsQXJyYXkgfSBmcm9tICcuLi8uLi91dGlsL2hlbHBlcnMnOwppbXBvcnQgVnVlIGZyb20gJ3Z1ZSc7CmV4cG9ydCBkZWZhdWx0IFZ1ZS5leHRlbmQoewogIG5hbWU6ICd2LWRhdGEnLAogIGluaGVyaXRBdHRyczogZmFsc2UsCiAgcHJvcHM6IHsKICAgIGl0ZW1zOiB7CiAgICAgIHR5cGU6IEFycmF5LAogICAgICBkZWZhdWx0OiBmdW5jdGlvbiBfZGVmYXVsdCgpIHsKICAgICAgICByZXR1cm4gW107CiAgICAgIH0KICAgIH0sCiAgICBvcHRpb25zOiB7CiAgICAgIHR5cGU6IE9iamVjdCwKICAgICAgZGVmYXVsdDogZnVuY3Rpb24gX2RlZmF1bHQoKSB7CiAgICAgICAgcmV0dXJuIHt9OwogICAgICB9CiAgICB9LAogICAgc29ydEJ5OiB7CiAgICAgIHR5cGU6IFtTdHJpbmcsIEFycmF5XSwKICAgICAgZGVmYXVsdDogZnVuY3Rpb24gX2RlZmF1bHQoKSB7CiAgICAgICAgcmV0dXJuIFtdOwogICAgICB9CiAgICB9LAogICAgc29ydERlc2M6IHsKICAgICAgdHlwZTogW0Jvb2xlYW4sIEFycmF5XSwKICAgICAgZGVmYXVsdDogZnVuY3Rpb24gX2RlZmF1bHQoKSB7CiAgICAgICAgcmV0dXJuIFtdOwogICAgICB9CiAgICB9LAogICAgY3VzdG9tU29ydDogewogICAgICB0eXBlOiBGdW5jdGlvbiwKICAgICAgZGVmYXVsdDogc29ydEl0ZW1zCiAgICB9LAogICAgbXVzdFNvcnQ6IEJvb2xlYW4sCiAgICBtdWx0aVNvcnQ6IEJvb2xlYW4sCiAgICBwYWdlOiB7CiAgICAgIHR5cGU6IE51bWJlciwKICAgICAgZGVmYXVsdDogMQogICAgfSwKICAgIGl0ZW1zUGVyUGFnZTogewogICAgICB0eXBlOiBOdW1iZXIsCiAgICAgIGRlZmF1bHQ6IDEwCiAgICB9LAogICAgZ3JvdXBCeTogewogICAgICB0eXBlOiBbU3RyaW5nLCBBcnJheV0sCiAgICAgIGRlZmF1bHQ6IGZ1bmN0aW9uIF9kZWZhdWx0KCkgewogICAgICAgIHJldHVybiBbXTsKICAgICAgfQogICAgfSwKICAgIGdyb3VwRGVzYzogewogICAgICB0eXBlOiBbQm9vbGVhbiwgQXJyYXldLAogICAgICBkZWZhdWx0OiBmdW5jdGlvbiBfZGVmYXVsdCgpIHsKICAgICAgICByZXR1cm4gW107CiAgICAgIH0KICAgIH0sCiAgICBjdXN0b21Hcm91cDogewogICAgICB0eXBlOiBGdW5jdGlvbiwKICAgICAgZGVmYXVsdDogZ3JvdXBJdGVtcwogICAgfSwKICAgIGxvY2FsZTogewogICAgICB0eXBlOiBTdHJpbmcsCiAgICAgIGRlZmF1bHQ6ICdlbi1VUycKICAgIH0sCiAgICBkaXNhYmxlU29ydDogQm9vbGVhbiwKICAgIGRpc2FibGVQYWdpbmF0aW9uOiBCb29sZWFuLAogICAgZGlzYWJsZUZpbHRlcmluZzogQm9vbGVhbiwKICAgIHNlYXJjaDogU3RyaW5nLAogICAgY3VzdG9tRmlsdGVyOiB7CiAgICAgIHR5cGU6IEZ1bmN0aW9uLAogICAgICBkZWZhdWx0OiBzZWFyY2hJdGVtcwogICAgfSwKICAgIHNlcnZlckl0ZW1zTGVuZ3RoOiB7CiAgICAgIHR5cGU6IE51bWJlciwKICAgICAgZGVmYXVsdDogLTEKICAgIH0KICB9LAogIGRhdGE6IGZ1bmN0aW9uIGRhdGEoKSB7CiAgICB2YXIgaW50ZXJuYWxPcHRpb25zID0gewogICAgICBwYWdlOiB0aGlzLnBhZ2UsCiAgICAgIGl0ZW1zUGVyUGFnZTogdGhpcy5pdGVtc1BlclBhZ2UsCiAgICAgIHNvcnRCeTogd3JhcEluQXJyYXkodGhpcy5zb3J0QnkpLAogICAgICBzb3J0RGVzYzogd3JhcEluQXJyYXkodGhpcy5zb3J0RGVzYyksCiAgICAgIGdyb3VwQnk6IHdyYXBJbkFycmF5KHRoaXMuZ3JvdXBCeSksCiAgICAgIGdyb3VwRGVzYzogd3JhcEluQXJyYXkodGhpcy5ncm91cERlc2MpLAogICAgICBtdXN0U29ydDogdGhpcy5tdXN0U29ydCwKICAgICAgbXVsdGlTb3J0OiB0aGlzLm11bHRpU29ydAogICAgfTsKCiAgICBpZiAodGhpcy5vcHRpb25zKSB7CiAgICAgIGludGVybmFsT3B0aW9ucyA9IE9iamVjdC5hc3NpZ24oaW50ZXJuYWxPcHRpb25zLCB0aGlzLm9wdGlvbnMpOwogICAgfQoKICAgIHZhciBfaW50ZXJuYWxPcHRpb25zID0gaW50ZXJuYWxPcHRpb25zLAogICAgICAgIHNvcnRCeSA9IF9pbnRlcm5hbE9wdGlvbnMuc29ydEJ5LAogICAgICAgIHNvcnREZXNjID0gX2ludGVybmFsT3B0aW9ucy5zb3J0RGVzYywKICAgICAgICBncm91cEJ5ID0gX2ludGVybmFsT3B0aW9ucy5ncm91cEJ5LAogICAgICAgIGdyb3VwRGVzYyA9IF9pbnRlcm5hbE9wdGlvbnMuZ3JvdXBEZXNjOwogICAgdmFyIHNvcnREaWZmID0gc29ydEJ5Lmxlbmd0aCAtIHNvcnREZXNjLmxlbmd0aDsKICAgIHZhciBncm91cERpZmYgPSBncm91cEJ5Lmxlbmd0aCAtIGdyb3VwRGVzYy5sZW5ndGg7CgogICAgaWYgKHNvcnREaWZmID4gMCkgewogICAgICB2YXIgX2ludGVybmFsT3B0aW9ucyRzb3J0OwoKICAgICAgKF9pbnRlcm5hbE9wdGlvbnMkc29ydCA9IGludGVybmFsT3B0aW9ucy5zb3J0RGVzYykucHVzaC5hcHBseShfaW50ZXJuYWxPcHRpb25zJHNvcnQsIF90b0NvbnN1bWFibGVBcnJheShmaWxsQXJyYXkoc29ydERpZmYsIGZhbHNlKSkpOwogICAgfQoKICAgIGlmIChncm91cERpZmYgPiAwKSB7CiAgICAgIHZhciBfaW50ZXJuYWxPcHRpb25zJGdyb3U7CgogICAgICAoX2ludGVybmFsT3B0aW9ucyRncm91ID0gaW50ZXJuYWxPcHRpb25zLmdyb3VwRGVzYykucHVzaC5hcHBseShfaW50ZXJuYWxPcHRpb25zJGdyb3UsIF90b0NvbnN1bWFibGVBcnJheShmaWxsQXJyYXkoZ3JvdXBEaWZmLCBmYWxzZSkpKTsKICAgIH0KCiAgICByZXR1cm4gewogICAgICBpbnRlcm5hbE9wdGlvbnM6IGludGVybmFsT3B0aW9ucwogICAgfTsKICB9LAogIGNvbXB1dGVkOiB7CiAgICBpdGVtc0xlbmd0aDogZnVuY3Rpb24gaXRlbXNMZW5ndGgoKSB7CiAgICAgIHJldHVybiB0aGlzLnNlcnZlckl0ZW1zTGVuZ3RoID49IDAgPyB0aGlzLnNlcnZlckl0ZW1zTGVuZ3RoIDogdGhpcy5maWx0ZXJlZEl0ZW1zLmxlbmd0aDsKICAgIH0sCiAgICBwYWdlQ291bnQ6IGZ1bmN0aW9uIHBhZ2VDb3VudCgpIHsKICAgICAgcmV0dXJuIHRoaXMuaW50ZXJuYWxPcHRpb25zLml0ZW1zUGVyUGFnZSA8PSAwID8gMSA6IE1hdGguY2VpbCh0aGlzLml0ZW1zTGVuZ3RoIC8gdGhpcy5pbnRlcm5hbE9wdGlvbnMuaXRlbXNQZXJQYWdlKTsKICAgIH0sCiAgICBwYWdlU3RhcnQ6IGZ1bmN0aW9uIHBhZ2VTdGFydCgpIHsKICAgICAgaWYgKHRoaXMuaW50ZXJuYWxPcHRpb25zLml0ZW1zUGVyUGFnZSA9PT0gLTEgfHwgIXRoaXMuaXRlbXMubGVuZ3RoKSByZXR1cm4gMDsKICAgICAgcmV0dXJuICh0aGlzLmludGVybmFsT3B0aW9ucy5wYWdlIC0gMSkgKiB0aGlzLmludGVybmFsT3B0aW9ucy5pdGVtc1BlclBhZ2U7CiAgICB9LAogICAgcGFnZVN0b3A6IGZ1bmN0aW9uIHBhZ2VTdG9wKCkgewogICAgICBpZiAodGhpcy5pbnRlcm5hbE9wdGlvbnMuaXRlbXNQZXJQYWdlID09PSAtMSkgcmV0dXJuIHRoaXMuaXRlbXNMZW5ndGg7CiAgICAgIGlmICghdGhpcy5pdGVtcy5sZW5ndGgpIHJldHVybiAwOwogICAgICByZXR1cm4gTWF0aC5taW4odGhpcy5pdGVtc0xlbmd0aCwgdGhpcy5pbnRlcm5hbE9wdGlvbnMucGFnZSAqIHRoaXMuaW50ZXJuYWxPcHRpb25zLml0ZW1zUGVyUGFnZSk7CiAgICB9LAogICAgaXNHcm91cGVkOiBmdW5jdGlvbiBpc0dyb3VwZWQoKSB7CiAgICAgIHJldHVybiAhIXRoaXMuaW50ZXJuYWxPcHRpb25zLmdyb3VwQnkubGVuZ3RoOwogICAgfSwKICAgIHBhZ2luYXRpb246IGZ1bmN0aW9uIHBhZ2luYXRpb24oKSB7CiAgICAgIHJldHVybiB7CiAgICAgICAgcGFnZTogdGhpcy5pbnRlcm5hbE9wdGlvbnMucGFnZSwKICAgICAgICBpdGVtc1BlclBhZ2U6IHRoaXMuaW50ZXJuYWxPcHRpb25zLml0ZW1zUGVyUGFnZSwKICAgICAgICBwYWdlU3RhcnQ6IHRoaXMucGFnZVN0YXJ0LAogICAgICAgIHBhZ2VTdG9wOiB0aGlzLnBhZ2VTdG9wLAogICAgICAgIHBhZ2VDb3VudDogdGhpcy5wYWdlQ291bnQsCiAgICAgICAgaXRlbXNMZW5ndGg6IHRoaXMuaXRlbXNMZW5ndGgKICAgICAgfTsKICAgIH0sCiAgICBmaWx0ZXJlZEl0ZW1zOiBmdW5jdGlvbiBmaWx0ZXJlZEl0ZW1zKCkgewogICAgICB2YXIgaXRlbXMgPSB0aGlzLml0ZW1zLnNsaWNlKCk7CgogICAgICBpZiAoIXRoaXMuZGlzYWJsZUZpbHRlcmluZyAmJiB0aGlzLnNlcnZlckl0ZW1zTGVuZ3RoIDw9IDApIHsKICAgICAgICBpdGVtcyA9IHRoaXMuY3VzdG9tRmlsdGVyKGl0ZW1zLCB0aGlzLnNlYXJjaCk7CiAgICAgIH0KCiAgICAgIHJldHVybiBpdGVtczsKICAgIH0sCiAgICBjb21wdXRlZEl0ZW1zOiBmdW5jdGlvbiBjb21wdXRlZEl0ZW1zKCkgewogICAgICB2YXIgaXRlbXMgPSB0aGlzLmZpbHRlcmVkSXRlbXMuc2xpY2UoKTsKCiAgICAgIGlmICghdGhpcy5kaXNhYmxlU29ydCAmJiB0aGlzLnNlcnZlckl0ZW1zTGVuZ3RoIDw9IDApIHsKICAgICAgICBpdGVtcyA9IHRoaXMuc29ydEl0ZW1zKGl0ZW1zKTsKICAgICAgfQoKICAgICAgaWYgKCF0aGlzLmRpc2FibGVQYWdpbmF0aW9uICYmIHRoaXMuc2VydmVySXRlbXNMZW5ndGggPD0gMCkgewogICAgICAgIGl0ZW1zID0gdGhpcy5wYWdpbmF0ZUl0ZW1zKGl0ZW1zKTsKICAgICAgfQoKICAgICAgcmV0dXJuIGl0ZW1zOwogICAgfSwKICAgIGdyb3VwZWRJdGVtczogZnVuY3Rpb24gZ3JvdXBlZEl0ZW1zKCkgewogICAgICByZXR1cm4gdGhpcy5pc0dyb3VwZWQgPyB0aGlzLmdyb3VwSXRlbXModGhpcy5jb21wdXRlZEl0ZW1zKSA6IG51bGw7CiAgICB9LAogICAgc2NvcGVkUHJvcHM6IGZ1bmN0aW9uIHNjb3BlZFByb3BzKCkgewogICAgICB2YXIgcHJvcHMgPSB7CiAgICAgICAgc29ydDogdGhpcy5zb3J0LAogICAgICAgIHNvcnRBcnJheTogdGhpcy5zb3J0QXJyYXksCiAgICAgICAgZ3JvdXA6IHRoaXMuZ3JvdXAsCiAgICAgICAgaXRlbXM6IHRoaXMuY29tcHV0ZWRJdGVtcywKICAgICAgICBvcHRpb25zOiB0aGlzLmludGVybmFsT3B0aW9ucywKICAgICAgICB1cGRhdGVPcHRpb25zOiB0aGlzLnVwZGF0ZU9wdGlvbnMsCiAgICAgICAgcGFnaW5hdGlvbjogdGhpcy5wYWdpbmF0aW9uLAogICAgICAgIGdyb3VwZWRJdGVtczogdGhpcy5ncm91cGVkSXRlbXMsCiAgICAgICAgb3JpZ2luYWxJdGVtc0xlbmd0aDogdGhpcy5pdGVtcy5sZW5ndGgKICAgICAgfTsKICAgICAgcmV0dXJuIHByb3BzOwogICAgfSwKICAgIGNvbXB1dGVkT3B0aW9uczogZnVuY3Rpb24gY29tcHV0ZWRPcHRpb25zKCkgewogICAgICByZXR1cm4gX29iamVjdFNwcmVhZCh7fSwgdGhpcy5vcHRpb25zKTsKICAgIH0KICB9LAogIHdhdGNoOiB7CiAgICBjb21wdXRlZE9wdGlvbnM6IHsKICAgICAgaGFuZGxlcjogZnVuY3Rpb24gaGFuZGxlcihvcHRpb25zLCBvbGQpIHsKICAgICAgICBpZiAoZGVlcEVxdWFsKG9wdGlvbnMsIG9sZCkpIHJldHVybjsKICAgICAgICB0aGlzLnVwZGF0ZU9wdGlvbnMob3B0aW9ucyk7CiAgICAgIH0sCiAgICAgIGRlZXA6IHRydWUsCiAgICAgIGltbWVkaWF0ZTogdHJ1ZQogICAgfSwKICAgIGludGVybmFsT3B0aW9uczogewogICAgICBoYW5kbGVyOiBmdW5jdGlvbiBoYW5kbGVyKG9wdGlvbnMsIG9sZCkgewogICAgICAgIGlmIChkZWVwRXF1YWwob3B0aW9ucywgb2xkKSkgcmV0dXJuOwogICAgICAgIHRoaXMuJGVtaXQoJ3VwZGF0ZTpvcHRpb25zJywgb3B0aW9ucyk7CiAgICAgIH0sCiAgICAgIGRlZXA6IHRydWUsCiAgICAgIGltbWVkaWF0ZTogdHJ1ZQogICAgfSwKICAgIHBhZ2U6IGZ1bmN0aW9uIHBhZ2UoX3BhZ2UpIHsKICAgICAgdGhpcy51cGRhdGVPcHRpb25zKHsKICAgICAgICBwYWdlOiBfcGFnZQogICAgICB9KTsKICAgIH0sCiAgICAnaW50ZXJuYWxPcHRpb25zLnBhZ2UnOiBmdW5jdGlvbiBpbnRlcm5hbE9wdGlvbnNQYWdlKHBhZ2UpIHsKICAgICAgdGhpcy4kZW1pdCgndXBkYXRlOnBhZ2UnLCBwYWdlKTsKICAgIH0sCiAgICBpdGVtc1BlclBhZ2U6IGZ1bmN0aW9uIGl0ZW1zUGVyUGFnZShfaXRlbXNQZXJQYWdlKSB7CiAgICAgIHRoaXMudXBkYXRlT3B0aW9ucyh7CiAgICAgICAgaXRlbXNQZXJQYWdlOiBfaXRlbXNQZXJQYWdlCiAgICAgIH0pOwogICAgfSwKICAgICdpbnRlcm5hbE9wdGlvbnMuaXRlbXNQZXJQYWdlJzogZnVuY3Rpb24gaW50ZXJuYWxPcHRpb25zSXRlbXNQZXJQYWdlKGl0ZW1zUGVyUGFnZSkgewogICAgICB0aGlzLiRlbWl0KCd1cGRhdGU6aXRlbXMtcGVyLXBhZ2UnLCBpdGVtc1BlclBhZ2UpOwogICAgfSwKICAgIHNvcnRCeTogZnVuY3Rpb24gc29ydEJ5KF9zb3J0QnkpIHsKICAgICAgdGhpcy51cGRhdGVPcHRpb25zKHsKICAgICAgICBzb3J0Qnk6IHdyYXBJbkFycmF5KF9zb3J0QnkpCiAgICAgIH0pOwogICAgfSwKICAgICdpbnRlcm5hbE9wdGlvbnMuc29ydEJ5JzogZnVuY3Rpb24gaW50ZXJuYWxPcHRpb25zU29ydEJ5KHNvcnRCeSwgb2xkKSB7CiAgICAgICFkZWVwRXF1YWwoc29ydEJ5LCBvbGQpICYmIHRoaXMuJGVtaXQoJ3VwZGF0ZTpzb3J0LWJ5JywgQXJyYXkuaXNBcnJheSh0aGlzLnNvcnRCeSkgPyBzb3J0QnkgOiBzb3J0QnlbMF0pOwogICAgfSwKICAgIHNvcnREZXNjOiBmdW5jdGlvbiBzb3J0RGVzYyhfc29ydERlc2MpIHsKICAgICAgdGhpcy51cGRhdGVPcHRpb25zKHsKICAgICAgICBzb3J0RGVzYzogd3JhcEluQXJyYXkoX3NvcnREZXNjKQogICAgICB9KTsKICAgIH0sCiAgICAnaW50ZXJuYWxPcHRpb25zLnNvcnREZXNjJzogZnVuY3Rpb24gaW50ZXJuYWxPcHRpb25zU29ydERlc2Moc29ydERlc2MsIG9sZCkgewogICAgICAhZGVlcEVxdWFsKHNvcnREZXNjLCBvbGQpICYmIHRoaXMuJGVtaXQoJ3VwZGF0ZTpzb3J0LWRlc2MnLCBBcnJheS5pc0FycmF5KHRoaXMuc29ydERlc2MpID8gc29ydERlc2MgOiBzb3J0RGVzY1swXSk7CiAgICB9LAogICAgZ3JvdXBCeTogZnVuY3Rpb24gZ3JvdXBCeShfZ3JvdXBCeSkgewogICAgICB0aGlzLnVwZGF0ZU9wdGlvbnMoewogICAgICAgIGdyb3VwQnk6IHdyYXBJbkFycmF5KF9ncm91cEJ5KQogICAgICB9KTsKICAgIH0sCiAgICAnaW50ZXJuYWxPcHRpb25zLmdyb3VwQnknOiBmdW5jdGlvbiBpbnRlcm5hbE9wdGlvbnNHcm91cEJ5KGdyb3VwQnksIG9sZCkgewogICAgICAhZGVlcEVxdWFsKGdyb3VwQnksIG9sZCkgJiYgdGhpcy4kZW1pdCgndXBkYXRlOmdyb3VwLWJ5JywgQXJyYXkuaXNBcnJheSh0aGlzLmdyb3VwQnkpID8gZ3JvdXBCeSA6IGdyb3VwQnlbMF0pOwogICAgfSwKICAgIGdyb3VwRGVzYzogZnVuY3Rpb24gZ3JvdXBEZXNjKF9ncm91cERlc2MpIHsKICAgICAgdGhpcy51cGRhdGVPcHRpb25zKHsKICAgICAgICBncm91cERlc2M6IHdyYXBJbkFycmF5KF9ncm91cERlc2MpCiAgICAgIH0pOwogICAgfSwKICAgICdpbnRlcm5hbE9wdGlvbnMuZ3JvdXBEZXNjJzogZnVuY3Rpb24gaW50ZXJuYWxPcHRpb25zR3JvdXBEZXNjKGdyb3VwRGVzYywgb2xkKSB7CiAgICAgICFkZWVwRXF1YWwoZ3JvdXBEZXNjLCBvbGQpICYmIHRoaXMuJGVtaXQoJ3VwZGF0ZTpncm91cC1kZXNjJywgQXJyYXkuaXNBcnJheSh0aGlzLmdyb3VwRGVzYykgPyBncm91cERlc2MgOiBncm91cERlc2NbMF0pOwogICAgfSwKICAgIG11bHRpU29ydDogZnVuY3Rpb24gbXVsdGlTb3J0KF9tdWx0aVNvcnQpIHsKICAgICAgdGhpcy51cGRhdGVPcHRpb25zKHsKICAgICAgICBtdWx0aVNvcnQ6IF9tdWx0aVNvcnQKICAgICAgfSk7CiAgICB9LAogICAgJ2ludGVybmFsT3B0aW9ucy5tdWx0aVNvcnQnOiBmdW5jdGlvbiBpbnRlcm5hbE9wdGlvbnNNdWx0aVNvcnQobXVsdGlTb3J0KSB7CiAgICAgIHRoaXMuJGVtaXQoJ3VwZGF0ZTptdWx0aS1zb3J0JywgbXVsdGlTb3J0KTsKICAgIH0sCiAgICBtdXN0U29ydDogZnVuY3Rpb24gbXVzdFNvcnQoX211c3RTb3J0KSB7CiAgICAgIHRoaXMudXBkYXRlT3B0aW9ucyh7CiAgICAgICAgbXVzdFNvcnQ6IF9tdXN0U29ydAogICAgICB9KTsKICAgIH0sCiAgICAnaW50ZXJuYWxPcHRpb25zLm11c3RTb3J0JzogZnVuY3Rpb24gaW50ZXJuYWxPcHRpb25zTXVzdFNvcnQobXVzdFNvcnQpIHsKICAgICAgdGhpcy4kZW1pdCgndXBkYXRlOm11c3Qtc29ydCcsIG11c3RTb3J0KTsKICAgIH0sCiAgICBwYWdlQ291bnQ6IHsKICAgICAgaGFuZGxlcjogZnVuY3Rpb24gaGFuZGxlcihwYWdlQ291bnQpIHsKICAgICAgICB0aGlzLiRlbWl0KCdwYWdlLWNvdW50JywgcGFnZUNvdW50KTsKICAgICAgfSwKICAgICAgaW1tZWRpYXRlOiB0cnVlCiAgICB9LAogICAgY29tcHV0ZWRJdGVtczogewogICAgICBoYW5kbGVyOiBmdW5jdGlvbiBoYW5kbGVyKGNvbXB1dGVkSXRlbXMpIHsKICAgICAgICB0aGlzLiRlbWl0KCdjdXJyZW50LWl0ZW1zJywgY29tcHV0ZWRJdGVtcyk7CiAgICAgIH0sCiAgICAgIGltbWVkaWF0ZTogdHJ1ZQogICAgfSwKICAgIHBhZ2luYXRpb246IHsKICAgICAgaGFuZGxlcjogZnVuY3Rpb24gaGFuZGxlcihwYWdpbmF0aW9uLCBvbGQpIHsKICAgICAgICBpZiAoZGVlcEVxdWFsKHBhZ2luYXRpb24sIG9sZCkpIHJldHVybjsKICAgICAgICB0aGlzLiRlbWl0KCdwYWdpbmF0aW9uJywgdGhpcy5wYWdpbmF0aW9uKTsKICAgICAgfSwKICAgICAgaW1tZWRpYXRlOiB0cnVlCiAgICB9CiAgfSwKICBtZXRob2RzOiB7CiAgICB0b2dnbGU6IGZ1bmN0aW9uIHRvZ2dsZShrZXksIG9sZEJ5LCBvbGREZXNjLCBwYWdlLCBtdXN0U29ydCwgbXVsdGlTb3J0KSB7CiAgICAgIHZhciBieSA9IG9sZEJ5LnNsaWNlKCk7CiAgICAgIHZhciBkZXNjID0gb2xkRGVzYy5zbGljZSgpOwogICAgICB2YXIgYnlJbmRleCA9IGJ5LmZpbmRJbmRleChmdW5jdGlvbiAoaykgewogICAgICAgIHJldHVybiBrID09PSBrZXk7CiAgICAgIH0pOwoKICAgICAgaWYgKGJ5SW5kZXggPCAwKSB7CiAgICAgICAgaWYgKCFtdWx0aVNvcnQpIHsKICAgICAgICAgIGJ5ID0gW107CiAgICAgICAgICBkZXNjID0gW107CiAgICAgICAgfQoKICAgICAgICBieS5wdXNoKGtleSk7CiAgICAgICAgZGVzYy5wdXNoKGZhbHNlKTsKICAgICAgfSBlbHNlIGlmIChieUluZGV4ID49IDAgJiYgIWRlc2NbYnlJbmRleF0pIHsKICAgICAgICBkZXNjW2J5SW5kZXhdID0gdHJ1ZTsKICAgICAgfSBlbHNlIGlmICghbXVzdFNvcnQpIHsKICAgICAgICBieS5zcGxpY2UoYnlJbmRleCwgMSk7CiAgICAgICAgZGVzYy5zcGxpY2UoYnlJbmRleCwgMSk7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgZGVzY1tieUluZGV4XSA9IGZhbHNlOwogICAgICB9IC8vIFJlc2V0IHBhZ2UgdG8gMSBpZiBzb3J0Qnkgb3Igc29ydERlc2MgaGF2ZSBjaGFuZ2VkCgoKICAgICAgaWYgKCFkZWVwRXF1YWwoYnksIG9sZEJ5KSB8fCAhZGVlcEVxdWFsKGRlc2MsIG9sZERlc2MpKSB7CiAgICAgICAgcGFnZSA9IDE7CiAgICAgIH0KCiAgICAgIHJldHVybiB7CiAgICAgICAgYnk6IGJ5LAogICAgICAgIGRlc2M6IGRlc2MsCiAgICAgICAgcGFnZTogcGFnZQogICAgICB9OwogICAgfSwKICAgIGdyb3VwOiBmdW5jdGlvbiBncm91cChrZXkpIHsKICAgICAgdmFyIF90aGlzJHRvZ2dsZSA9IHRoaXMudG9nZ2xlKGtleSwgdGhpcy5pbnRlcm5hbE9wdGlvbnMuZ3JvdXBCeSwgdGhpcy5pbnRlcm5hbE9wdGlvbnMuZ3JvdXBEZXNjLCB0aGlzLmludGVybmFsT3B0aW9ucy5wYWdlLCB0cnVlLCBmYWxzZSksCiAgICAgICAgICBncm91cEJ5ID0gX3RoaXMkdG9nZ2xlLmJ5LAogICAgICAgICAgZ3JvdXBEZXNjID0gX3RoaXMkdG9nZ2xlLmRlc2MsCiAgICAgICAgICBwYWdlID0gX3RoaXMkdG9nZ2xlLnBhZ2U7CgogICAgICB0aGlzLnVwZGF0ZU9wdGlvbnMoewogICAgICAgIGdyb3VwQnk6IGdyb3VwQnksCiAgICAgICAgZ3JvdXBEZXNjOiBncm91cERlc2MsCiAgICAgICAgcGFnZTogcGFnZQogICAgICB9KTsKICAgIH0sCiAgICBzb3J0OiBmdW5jdGlvbiBzb3J0KGtleSkgewogICAgICBpZiAoQXJyYXkuaXNBcnJheShrZXkpKSByZXR1cm4gdGhpcy5zb3J0QXJyYXkoa2V5KTsKCiAgICAgIHZhciBfdGhpcyR0b2dnbGUyID0gdGhpcy50b2dnbGUoa2V5LCB0aGlzLmludGVybmFsT3B0aW9ucy5zb3J0QnksIHRoaXMuaW50ZXJuYWxPcHRpb25zLnNvcnREZXNjLCB0aGlzLmludGVybmFsT3B0aW9ucy5wYWdlLCB0aGlzLmludGVybmFsT3B0aW9ucy5tdXN0U29ydCwgdGhpcy5pbnRlcm5hbE9wdGlvbnMubXVsdGlTb3J0KSwKICAgICAgICAgIHNvcnRCeSA9IF90aGlzJHRvZ2dsZTIuYnksCiAgICAgICAgICBzb3J0RGVzYyA9IF90aGlzJHRvZ2dsZTIuZGVzYywKICAgICAgICAgIHBhZ2UgPSBfdGhpcyR0b2dnbGUyLnBhZ2U7CgogICAgICB0aGlzLnVwZGF0ZU9wdGlvbnMoewogICAgICAgIHNvcnRCeTogc29ydEJ5LAogICAgICAgIHNvcnREZXNjOiBzb3J0RGVzYywKICAgICAgICBwYWdlOiBwYWdlCiAgICAgIH0pOwogICAgfSwKICAgIHNvcnRBcnJheTogZnVuY3Rpb24gc29ydEFycmF5KHNvcnRCeSkgewogICAgICB2YXIgX3RoaXMgPSB0aGlzOwoKICAgICAgdmFyIHNvcnREZXNjID0gc29ydEJ5Lm1hcChmdW5jdGlvbiAocykgewogICAgICAgIHZhciBpID0gX3RoaXMuaW50ZXJuYWxPcHRpb25zLnNvcnRCeS5maW5kSW5kZXgoZnVuY3Rpb24gKGspIHsKICAgICAgICAgIHJldHVybiBrID09PSBzOwogICAgICAgIH0pOwoKICAgICAgICByZXR1cm4gaSA+IC0xID8gX3RoaXMuaW50ZXJuYWxPcHRpb25zLnNvcnREZXNjW2ldIDogZmFsc2U7CiAgICAgIH0pOwogICAgICB0aGlzLnVwZGF0ZU9wdGlvbnMoewogICAgICAgIHNvcnRCeTogc29ydEJ5LAogICAgICAgIHNvcnREZXNjOiBzb3J0RGVzYwogICAgICB9KTsKICAgIH0sCiAgICB1cGRhdGVPcHRpb25zOiBmdW5jdGlvbiB1cGRhdGVPcHRpb25zKG9wdGlvbnMpIHsKICAgICAgdGhpcy5pbnRlcm5hbE9wdGlvbnMgPSBfb2JqZWN0U3ByZWFkKF9vYmplY3RTcHJlYWQoX29iamVjdFNwcmVhZCh7fSwgdGhpcy5pbnRlcm5hbE9wdGlvbnMpLCBvcHRpb25zKSwge30sIHsKICAgICAgICBwYWdlOiB0aGlzLnNlcnZlckl0ZW1zTGVuZ3RoIDwgMCA/IE1hdGgubWF4KDEsIE1hdGgubWluKG9wdGlvbnMucGFnZSB8fCB0aGlzLmludGVybmFsT3B0aW9ucy5wYWdlLCB0aGlzLnBhZ2VDb3VudCkpIDogb3B0aW9ucy5wYWdlIHx8IHRoaXMuaW50ZXJuYWxPcHRpb25zLnBhZ2UKICAgICAgfSk7CiAgICB9LAogICAgc29ydEl0ZW1zOiBmdW5jdGlvbiBzb3J0SXRlbXMoaXRlbXMpIHsKICAgICAgdmFyIHNvcnRCeSA9IHRoaXMuaW50ZXJuYWxPcHRpb25zLnNvcnRCeTsKICAgICAgdmFyIHNvcnREZXNjID0gdGhpcy5pbnRlcm5hbE9wdGlvbnMuc29ydERlc2M7CgogICAgICBpZiAodGhpcy5pbnRlcm5hbE9wdGlvbnMuZ3JvdXBCeS5sZW5ndGgpIHsKICAgICAgICBzb3J0QnkgPSBbXS5jb25jYXQoX3RvQ29uc3VtYWJsZUFycmF5KHRoaXMuaW50ZXJuYWxPcHRpb25zLmdyb3VwQnkpLCBfdG9Db25zdW1hYmxlQXJyYXkoc29ydEJ5KSk7CiAgICAgICAgc29ydERlc2MgPSBbXS5jb25jYXQoX3RvQ29uc3VtYWJsZUFycmF5KHRoaXMuaW50ZXJuYWxPcHRpb25zLmdyb3VwRGVzYyksIF90b0NvbnN1bWFibGVBcnJheShzb3J0RGVzYykpOwogICAgICB9CgogICAgICByZXR1cm4gdGhpcy5jdXN0b21Tb3J0KGl0ZW1zLCBzb3J0QnksIHNvcnREZXNjLCB0aGlzLmxvY2FsZSk7CiAgICB9LAogICAgZ3JvdXBJdGVtczogZnVuY3Rpb24gZ3JvdXBJdGVtcyhpdGVtcykgewogICAgICByZXR1cm4gdGhpcy5jdXN0b21Hcm91cChpdGVtcywgdGhpcy5pbnRlcm5hbE9wdGlvbnMuZ3JvdXBCeSwgdGhpcy5pbnRlcm5hbE9wdGlvbnMuZ3JvdXBEZXNjKTsKICAgIH0sCiAgICBwYWdpbmF0ZUl0ZW1zOiBmdW5jdGlvbiBwYWdpbmF0ZUl0ZW1zKGl0ZW1zKSB7CiAgICAgIC8vIE1ha2Ugc3VyZSB3ZSBkb24ndCB0cnkgdG8gZGlzcGxheSBub24tZXhpc3RhbnQgcGFnZSBpZiBpdGVtcyBzdWRkZW5seSBjaGFuZ2UKICAgICAgLy8gVE9ETzogQ291bGQgcG9zc2libHkgbW92ZSB0aGlzIHRvIHBhZ2VTdGFydC9wYWdlU3RvcD8KICAgICAgaWYgKHRoaXMuc2VydmVySXRlbXNMZW5ndGggPT09IC0xICYmIGl0ZW1zLmxlbmd0aCA8PSB0aGlzLnBhZ2VTdGFydCkgewogICAgICAgIHRoaXMuaW50ZXJuYWxPcHRpb25zLnBhZ2UgPSBNYXRoLm1heCgxLCB0aGlzLmludGVybmFsT3B0aW9ucy5wYWdlIC0gMSk7CiAgICAgIH0KCiAgICAgIHJldHVybiBpdGVtcy5zbGljZSh0aGlzLnBhZ2VTdGFydCwgdGhpcy5wYWdlU3RvcCk7CiAgICB9CiAgfSwKICByZW5kZXI6IGZ1bmN0aW9uIHJlbmRlcigpIHsKICAgIHJldHVybiB0aGlzLiRzY29wZWRTbG90cy5kZWZhdWx0ICYmIHRoaXMuJHNjb3BlZFNsb3RzLmRlZmF1bHQodGhpcy5zY29wZWRQcm9wcyk7CiAgfQp9KTs="},null]}